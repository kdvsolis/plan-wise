@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using System.IdentityModel.Tokens.Jwt;
@using System.Net.Http.Headers;
@using System.Text;
@using System.Text.Json;

<div class="modal fade" id="modifyInstanceModal" ref="modifyInstanceModal" tabindex="-1" role="dialog" aria-labelledby="incomeModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="modifyInstanceModalLabel">Modify Instance</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <ul class="nav nav-tabs" id="instanceTabs" role="tablist">
                    @if (localSelectedInstance.expense.Count > 0)
                    {
                        <li class="nav-item" role="presentation">
                            <button class="nav-link active" id="expense-data-tab" data-bs-toggle="tab" data-bs-target="#expense-data" type="button" role="tab" aria-controls="expense-data" aria-selected="true">Expense</button>
                        </li> 
                    } 
                    @if (localSelectedInstance.income.Count > 0) { 
                        <li class="nav-item" role="presentation">
                            <button class="nav-link @(localSelectedInstance.expense.Count == 0 ? " active" : "" )" id="income-data-tab" data-bs-toggle="tab" data-bs-target="#income-data" type="button" role="tab" aria-controls="income-data" aria-selected="false">Income</button>
                        </li> 
                    } 
                </ul>
                <div class="tab-content" id="instanceTabsContent"> 
                    @if (localSelectedInstance.expense.Count > 0) 
                    { 
                        <div class="tab-pane fade show active" id="expense-data" role="tabpanel" aria-labelledby="expense-data-tab">
                            <div class="income-expense-input">
                            <div class="income-expense-row">
                                <span>Expense: </span>
                                <input type="text" class="expense-input modal-input" @bind="@localSelectedInstance.expense[expenseInstanceIndex].expenses">
                            </div>
                            <div class="income-expense-row">
                                <span>Amount($): </span>
                                <input type="number" class="expense-input modal-input" @bind="@localSelectedInstance.expense[expenseInstanceIndex].amount">
                            </div>
                            <div class="income-expense-row">
                                <span>Date: </span>
                                <input type="date" pattern="\d{4}-\d{2}-\d{2}" disabled class="expense-input modal-input" @bind="@localSelectedDate">
                            </div>
                            </div>
                            <nav aria-label="Page navigation example">
                            <ul class="pagination">
                                <li class="page-item">
                                <a class="page-link" @onclick="@decrementExpenseInstanceIndex">
                                    @("<<") Previous </a>
                                </li>
                                <li class="page-item">
                                <a class="page-link" @onclick="@incrementExpenseInstanceIndex">Next @(">>")</a>
                                </li>
                            </ul>
                            </nav>
                        </div> 
                    } 
                    @if (localSelectedInstance.income.Count > 0) 
                    { 
                        <div class="tab-pane fade @isIncomeActive" id="income-data" role="tabpanel" aria-labelledby="income-data-tab">
                    <div class="income-expense-input">
                    <div class="income-expense-row">
                        <span>Source: </span>
                        <input type="text" class="expense-input modal-input" @bind="@localSelectedInstance.income[incomeInstanceIndex].source">
                    </div>
                    <div class="income-expense-row">
                        <span>Amount($): </span>
                        <input type="number" class="expense-input modal-input" @bind="@localSelectedInstance.income[incomeInstanceIndex].amount">
                    </div>
                    <div class="income-expense-row">
                        <span>Date: </span>
                        <input type="date" class="expense-input modal-input" @bind="@localSelectedDate">
                    </div>
                    </div>
                    <nav aria-label="Page navigation example">
                    <ul class="pagination">
                        <li class="page-item">
                        <a class="page-link" @onclick="@decrementIncomeInstanceIndex">
                            @("<<") Previous </a>
                        </li>
                        <li class="page-item">
                        <a class="page-link" @onclick="@incrementIncomeInstanceIndex">Next @(">>")</a>
                        </li>
                    </ul>
                    </nav>
                </div> 
                } 
                </div>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="modifyInstance">Save changes</button>
            </div>
        </div>
    </div>
</div>
<style scoped>
    @@import "/css/components.css";
    @@import "/css/budgeting-app.css";

    .expense-input {
        width: 100%;
        padding: 5px;
        border-radius: 5px;
        border: 1px solid rgba(0, 0, 0, .1);
        background: transparent;
        font-family: system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Noto Sans,Ubuntu,Cantarell,Helvetica Neue,Oxygen,Fira Sans,Droid Sans,sans-serif;
        font-size: 1.125rem;
    }

    .expense-cell {
        padding: 15px !important;
    }

    .modal-input {
        width: 50% !important;
    }

    .income-expense-input {
        display: flex;
        flex-direction: column;
        row-gap: 15px;
    }

    .income-expense-row {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .dropdown-menu {
        padding-left: 10px !important;
        padding-right: 10px !important;
    }

    .dropdown-icon {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
    }

    .btn.dropdown-toggle::after {
        display: none;
    }

    #instanceTabs {
        padding-left: 0px !important;
    }

    .tab-content{
        padding: 15px;
    }
</style>
@code {
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public EventCallback OnModalClose { get; set; }
    [Parameter] public dynamic? selectedInstance { get; set; }
    [Parameter] public DateTime selectedDate { get; set; }

    private int expenseInstanceIndex = 0;
    private int incomeInstanceIndex = 0;
    private SelectedIncome? localSelectedInstance ;
    private DateTime? localSelectedDate;
    private string isIncomeActive = "";

    protected override void OnInitialized()
    {
        
    }

    protected override void OnParametersSet()
    {
        localSelectedInstance = new SelectedIncome {
            income = new List<Income>(),
            expense = new List<Expense>()
        };
        foreach(var i in selectedInstance?.income!)
        {
            localSelectedInstance.income.Add(new Income
            {
                id = i.id,
                amount = i.amount,
                source = i.source,
                date = selectedDate
            });
        }
        foreach (var e in selectedInstance?.expense!)
        {
            localSelectedInstance.expense.Add(new Expense
                {
                    id = e.id,
                    amount = e.amount,
                    expenses = e.expenses,
                    date = selectedDate
                });
        }
        isIncomeActive = localSelectedInstance.expense.Count == 0 ? "show active" : "";
        localSelectedDate = selectedDate;
    }

    public async Task Show()
    {
        await JSRuntime.InvokeVoidAsync("showModal", "modifyInstanceModal");
        await OnChange.InvokeAsync(null);
    }

    public async Task Hide()
    {
        await JSRuntime.InvokeVoidAsync("hideModal", "modifyInstanceModal");
        await OnChange.InvokeAsync(null);
        await OnModalClose.InvokeAsync();
    }

    private void incrementExpenseInstanceIndex()
    {
        if (expenseInstanceIndex == localSelectedInstance.expense.Count - 1)
        {
            return;
        }
        expenseInstanceIndex++;
    }

    private void decrementExpenseInstanceIndex()
    {
        if (expenseInstanceIndex == 0)
        {
            return;
        }
        expenseInstanceIndex--;
    }

    private void incrementIncomeInstanceIndex()
    {
        if (incomeInstanceIndex == localSelectedInstance.income.Count - 1)
        {
            return;
        }
        incomeInstanceIndex++;
    }

    private void decrementIncomeInstanceIndex()
    {
        if (incomeInstanceIndex == 0)
        {
            return;
        }
        incomeInstanceIndex--;
    }

    private async Task modifyInstance()
    {

        try
        {
            var body = new
            {
                income = localSelectedInstance.income,
                expense = localSelectedInstance.expense,
                date = localSelectedDate,
            };

            try
            {
                string bearerToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", bearerToken);

                var response = await Http.PutAsJsonAsync("/api/BudgetTable/update_budgets", body);
                if (response.IsSuccessStatusCode)
                {
                    await Hide();
                }
                else
                {
                    Console.WriteLine($"Error: {response.ReasonPhrase}");
                }
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception);
            }

        }
        catch (Exception exception)
        {
            Console.Error.WriteLine(exception);
        }
    }

    public class Expense
    {
        public int id { get; set; }
        public string expenses { get; set; }
        public double amount { get; set; }
        public DateTime date { get; set; }
    }

    public class Income
    {
        public int id { get; set; }
        public string source { get; set; }
        public double amount { get; set; }
        public DateTime date { get; set; }
    }

    public class SelectedIncome
    {
        public List<Expense>? expense { get; set; }
        public List<Income>? income { get; set; }
    }

}


