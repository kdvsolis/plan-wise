@inject IJSRuntime JSRuntime
@inject HttpClient Http
@using System.IdentityModel.Tokens.Jwt;
@using System.Net.Http.Headers;
@using System.Text;
@using System.Text.Json;

<div class="modal fade" id="incomeModal" ref="incomeModal" tabindex="-1" role="dialog" aria-labelledby="incomeModalLabel" aria-hidden="true">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="incomeModalLabel">New Income</h5>
                <button type="button" class="close" data-bs-dismiss="modal" aria-label="Close">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <div class="income-expense-input">
                    <div class="income-expense-row">
                        <span>Income: </span>
                        <input type="text" class="expense-input modal-input" @bind="localHeaderSource">
                    </div>
                    <div class="income-expense-row">
                        <span>Amount($): </span>
                        <input type="number" class="expense-input modal-input" @bind="localHeaderAmount">
                    </div>
                    <div class="income-expense-row">
                        <span>Date: </span>
                        <input type="date" pattern="\d{4}-\d{2}-\d{2}" disabled="true" class="expense-input modal-input" @bind="localSelectedDate">
                    </div>
                    <div class="income-expense-row">
                        <span>Frequency: </span>
                        <div class="dropdown dropdown-border modal-input" data-bs-toggle="dropdown" data-bs-display="static">
                            <button class="btn dropdown-toggle @localSelectedClassHeader" type="button" id="dropdownMenuButtonHeader" aria-expanded="false">
                                @localSelectedOptionHeader
                            </button>
                            <span class="dropdown-icon">▼</span>
                            <ul class="dropdown-menu" aria-labelledby="dropdownMenuButtonHeader">
                                @foreach (var option in options)
                                {
                                    <li class="mt-1">
                                        <a class="@(option.@class) dropdown-item" href="#" @onclick="@(() => selectOptionHeader(option))">@option.text</a>
                                    </li>
                                }
                            </ul>
                        </div>

                    </div>
                </div>
            </div>

            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="createIncome">Save changes</button>
            </div>
        </div>
    </div>
</div>
<style scoped>
    @@import "/css/components.css";
    @@import "/css/budgeting-app.css";

    .center-pagination {
        width: 100%;
        padding: 50px;
    }

        .center-pagination > nav {
            margin: auto;
        }

    .expense-input {
        width: 100%;
        padding: 5px;
        border-radius: 5px;
        border: 1px solid rgba(0, 0, 0, .1);
        background: transparent;
        font-family: system-ui,-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Noto Sans,Ubuntu,Cantarell,Helvetica Neue,Oxygen,Fira Sans,Droid Sans,sans-serif;
        font-size: 1.125rem;
    }

    .modal-input {
        width: 50% !important;
    }

    .page-link-budget {
        background-color: transparent;
        border: none;
        color: white;
        text-decoration: none;
    }

    .action {
        padding-left: 10px;
        padding-right: 10px;
    }

    .action-data {
        display: flex;
        flex-direction: column;
        row-gap: 10px;
    }

    .expense-cell {
        padding: 15px !important;
    }

    .income-expense-input {
        display: flex;
        flex-direction: column;
        row-gap: 15px;
    }

    .income-expense-row {
        display: flex;
        flex-direction: row;
        justify-content: space-between;
    }

    .dropdown-menu {
        padding-left: 10px !important;
        padding-right: 10px !important;
    }

    .dropdown-icon {
        position: absolute;
        right: 10px;
        top: 50%;
        transform: translateY(-50%);
    }

    .btn.dropdown-toggle::after {
        display: none;
    }

    .hide-dash {
        color: transparent;
    }

    #instanceTabs {
        padding-left: 0px !important;
    }
</style>
@code {
    [Parameter] public EventCallback OnChange { get; set; }
    [Parameter] public EventCallback OnModalClose { get; set; }
    [Parameter] public dynamic selectedOptionCategoryHeader { get; set; }
    [Parameter] public string selectedClassCategoryHeader { get; set; }
    [Parameter] public string selectedOptionHeader { get; set; }
    [Parameter] public string selectedClassHeader { get; set; }
    [Parameter] public string headerSource { get; set; }
    [Parameter] public double headerAmount { get; set; }
    [Parameter] public DateTime headerDate { get; set; }
    [Parameter] public DateTime selectedDate { get; set; }

    private dynamic localSelectedOptionCategoryHeader;
    private string localSelectedOptionHeader;
    private string localSelectedClassHeader;
    private string localHeaderSource;
    private double localHeaderAmount;
    private DateTime localHeaderDate;
    private DateTime localSelectedDate;

    // Your options and categories here
    private List<Option> options = new List<Option>()
    {
        new Option { text = "Daily", @class = "daily"},
        new Option { text = "Weekly", @class = "weekly"},
        new Option { text = "Every Other Week", @class = "every-other-week"},
        new Option { text = "Monthly", @class = "monthly"},
        new Option { text = "Quarterly", @class = "quarterly"},
        new Option { text = "Every 6 Months", @class = "every-6-months"},
        new Option { text = "Annually", @class = "annually"},
        new Option { text = "One Time", @class = "one-time-expense"}
    };

    protected override async Task OnInitializedAsync()
    {
        
    }

    protected override void OnParametersSet()
    {
        localSelectedOptionCategoryHeader = selectedOptionCategoryHeader;
        localSelectedOptionHeader = selectedOptionHeader;
        localSelectedClassHeader = selectedClassHeader;
        localHeaderSource = headerSource;
        localHeaderAmount = headerAmount;
        localHeaderDate = headerDate;
        localSelectedDate = selectedDate;
    }

    public async Task Show()
    {
        await JSRuntime.InvokeVoidAsync("showModal", "incomeModal");
        await OnChange.InvokeAsync(null);
    }

    public async Task Hide()
    {
        await JSRuntime.InvokeVoidAsync("hideModal", "incomeModal");
        await OnChange.InvokeAsync(null);
        await OnModalClose.InvokeAsync();
    }

    private void selectOptionHeader(Option option)
    {
        localSelectedOptionHeader = option.text;
        localSelectedClassHeader = option.@class;
    }

    // Implement your createIncome method here
    async Task createIncome()
    {
        try
        {
            var body = new
            {
                source = this.localHeaderSource,
                amount = this.localHeaderAmount,
                start_date = this.localSelectedDate,
                frequency = options.FindIndex(x => x.@class == localSelectedClassHeader),
            };

            try
            {
                string bearerToken = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
                Http.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue("Bearer", bearerToken);

                var response = await Http.PostAsJsonAsync("/api/Income/income", body);
                if (response.IsSuccessStatusCode)
                {
                    await Hide();
                }
                else
                {
                    Console.WriteLine($"Error: {response.ReasonPhrase}");
                }
            }
            catch (Exception exception)
            {
                Console.WriteLine(exception);
            }

        }
        catch (Exception exception)
        {
            Console.Error.WriteLine(exception);
        }
    }

    public class Option
    {
        public string text { get; set; }
        public string @class { get; set; }
    }

    public class Row
    {
        public int id { get; set; }
        public string source { get; set; }
        public double amount { get; set; }
        public DateTime start_date { get; set; }
        public int? frequency { get; set; }
        public int user_id { get; set; }
    }

}

