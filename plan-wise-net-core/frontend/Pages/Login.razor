@page "/login"
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager
@using System.IdentityModel.Tokens.Jwt;


<div class="container w-container">
    <div class="form-wrapper">
        <div class="w-form">
            <EditForm Model="loginModel" OnValidSubmit="HandleValidSubmit">
                <h1 class="heading">Login</h1>
                <div>
                    <label for="email" class="field-label-2">Email</label>
                    <InputText id="username" @bind-Value="loginModel.username" class="text-field w-input" required />
                </div>
                <div>
                    <label for="password-2" class="field-label">Password</label>
                    <InputText id="password" @bind-Value="loginModel.password" type="password" class="text-field-2 w-input" required />
                </div>
                <div class="relative w-clearfix">
                    <a href="#" class="forgot-password-link">Forgot password</a>
                </div>
                <button type="submit" class="uui-button-4 button-width w-button">Login</button>
                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger" role="alert">@errorMessage</div>
                }
            </EditForm>
        </div>
        <div>
            <div class="text-block-2">
                Need an account? <a href="/registration">Sign up</a>
            </div>
        </div>
    </div>
</div>

<style scoped>
    @@import "/css/components.css";
    @@import "/css/budgeting-app.css";
</style>

@code {
    [Parameter]
    public EventCallback<string> OnLogin { get; set; }
    private LoginModel loginModel = new LoginModel();
    private string errorMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        var token = await JSRuntime.InvokeAsync<string>("localStorage.getItem", "token");
        if (!string.IsNullOrEmpty(token))
        {
            var handler = new JwtSecurityTokenHandler();
            var jwtToken = handler.ReadJwtToken(token);

            if (jwtToken.ValidTo > DateTime.UtcNow)
            {
                NavigationManager.NavigateTo("/");
            }
        }
    }

    private async Task HandleValidSubmit()
    {
        var response = await Http.PostAsJsonAsync("/api/Auth/login", loginModel);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<LoginResult>();
            if (result!.success)
            {
                await JSRuntime.InvokeVoidAsync("localStorage.setItem", "token", result.token);
                await OnLogin.InvokeAsync(result.token);

                NavigationManager.NavigateTo("/");
            }
            else
            {
                errorMessage = result.message;
            }
        }
        else
        {
            errorMessage = "An error occurred while logging in.";
        }
    }

    public class LoginModel
    {
        public string username { get; set; }
        public string password { get; set; }
    }

    public class LoginResult
    {
        public bool success { get; set; }
        public string token { get; set; }
        public string message { get; set; }
    }
}
